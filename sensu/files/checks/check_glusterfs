#!/bin/bash

PATH=/sbin:/bin:/usr/sbin:/usr/bin

PROGNAME=$(basename -- $0)

# parse command line
usage () {
  echo ""
  echo "USAGE: "
  echo "  $PROGNAME -v VOLUME -n BRICKS [-w GB -c GB]"
  echo "     -n BRICKS: number of bricks"
  echo "     -w and -c values in GB"
  exit $STATE_UNKNOWN
}

while getopts "v:n:w:c:" opt; do
  case $opt in
    v) VOLUME=${OPTARG} ;;
    n) BRICKS=${OPTARG} ;;
    w) WARN=${OPTARG} ;;
    c) CRIT=${OPTARG} ;;
    *) usage ;;
  esac
done

if [ -z "${VOLUME}" -o -z "${BRICKS}" ]; then
  usage
fi

Exit () {
	echo "$1: ${2:0}"
	status=STATE_$1
		case "$status" in
			STATE_OK) EXITVAL=0 ;;
			STATE_WARNING) EXITVAL=1 ;;
			STATE_CRITICAL|STATE_UNKNOWN) EXITVAL=2 ;;
			*) EXITVAL=2 ;;
		esac
	exit $EXITVAL
}

get_status() {
	ret=1
	tries=3
	while [ $ret -ne 0 ] || [ $tries -ne 0 ]; do
		out=$(timeout -s9 5 sudo gluster volume status ${VOLUME} detail 2>&1)
		ret=$?
		[ $ret -eq 0 ] && break
		tries=$[ $tries - 1 ]
		sleep 1
	done

	if [ $ret -ne 0 ]; then
		Exit UNKNOWN "$out"
	fi

	echo "$out"
}

# check for commands
for cmd in basename bc awk sudo pidof gluster; do
	if ! type -p "$cmd" >/dev/null; then
		Exit UNKNOWN "$cmd not found"
	fi
done

# check for glusterd (management daemon)
if ! pidof glusterd &>/dev/null; then
	Exit CRITICAL "glusterd management daemon not running"
fi

# check for glusterfsd (brick daemon)
if ! pidof glusterfsd &>/dev/null; then
	Exit CRITICAL "glusterfsd brick daemon not running"
fi

# get volume status
bricksfound=0
freegb=9999999
shopt -s nullglob
while read -r line; do
	field=($(echo $line))
	case ${field[0]} in
	Brick) 
		brick=${field[@]:2}
		;;
	Disk)
		key=${field[@]:0:3}
                if [ "${key}" = "Disk Space Free" ]; then
                        freeunit=${field[@]:4}
                        free=${freeunit:0:-2}
                        unit=${freeunit#$free}
                        case $unit in
                        GB)
                            true
                            ;;
                        TB)
                            free=$(echo "$free*1024" | bc -q) 
                            ;;
                        *)
                            Exit UNKNOWN "unknown disk space size $freeunit"
                            ;;
                        esac

#                       if [ "$unit" != "GB" ]; then
#                               Exit UNKNOWN "unknown disk space size $freeunit"
#                       fi
                        free=$(echo "${free} / 1" | bc -q)
                        if [ $free -lt $freegb ]; then
                                freegb=$free
                        fi
		fi
		;;
	Online)
		online=${field[@]:2}
		if [ "${online}" = "Y" ]; then
			let $((bricksfound++))
		else
			errors=("${errors[@]}" "$brick offline")
		fi
		;;
	esac
done < <(get_status)

if [ $bricksfound -eq 0 ]; then
	Exit CRITICAL "no bricks found"
elif [ $bricksfound -lt $BRICKS ]; then
	errors=("${errors[@]}" "found $bricksfound bricks, expected $BRICKS ")
fi

if [ -n "$CRIT" -a -n "$WARN" ]; then
	if [ $CRIT -ge $WARN ]; then
		Exit UNKNOWN "critical threshold below warning"
	elif [ $freegb -lt $CRIT ]; then
		Exit CRITICAL "free space ${freegb}GB"
	elif [ $freegb -lt $WARN ]; then
		errors=("${errors[@]}" "free space ${freegb}GB")
	fi
fi

# exit with warning if errors
if [ -n "$errors" ]; then
	sep='; '
	msg=$(printf "${sep}%s" "${errors[@]}")
	msg=${msg:${#sep}}

	Exit WARNING "${msg}"
fi

# exit with no errors
Exit OK "${bricksfound} bricks; free space ${freegb}GB"

